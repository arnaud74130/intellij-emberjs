import de.undercouch.gradle.tasks.download.Download

buildscript {
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$KOTLIN_VERSION"
    }
}

plugins {
    id "org.jetbrains.intellij" version "0.0.31"
    id "de.undercouch.download" version "2.0.0"
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.intellij'

version = getVersionName()

repositories {
    jcenter()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$KOTLIN_VERSION"
    compile files("${buildDir}/plugins/handlebars/lib/handlebars.jar")

    testCompile "org.assertj:assertj-core:2.2.0"
}

intellij {
    version = 'IU-15.0.1'
    pluginName = 'Ember.js'
    plugins = ['JavaScriptLanguage']

    sandboxDirectory = project.rootDir.canonicalPath + "/.sandbox"

    publish {
        pluginId '8049'
        username "$JETBRAINS_USERNAME"
        password "$JETBRAINS_PASSWORD"
    }

    intellijFiles.addAll(files("${buildDir}/plugins/handlebars/lib/handlebars.jar"))
}

test {
    testLogging {
        exceptionFormat = 'full'
    }
}

task downloadHandlebars(type: Download) {
    src "https://plugins.jetbrains.com/plugin/download?pr=&updateId=21801"
    dest "${buildDir}/downloads/handlebars.zip"
    onlyIfNewer true
}

task extractHandlebars(dependsOn: downloadHandlebars, type: Copy) {
    from zipTree(downloadHandlebars.dest)
    into "${buildDir}/plugins/"
}

task installHandlebars(dependsOn: extractHandlebars, type: Copy) {
    from "${buildDir}/plugins/handlebars"
    into "${intellij.sandboxDirectory}/plugins/handlebars"
}

task uninstallHandlebars(type: Delete) {
    delete "${intellij.sandboxDirectory}/plugins/handlebars"
}

classes.dependsOn(extractHandlebars)

/*
 * Gets the version name from the latest Git tag
 */
def getVersionName() {
    def stdout = new ByteArrayOutputStream()
    try {
        exec {
            commandLine 'git', 'describe', '--tags'
            standardOutput = stdout
        }
    } catch (ignored) {
        return '0.0.0'
    }

    def version = stdout.toString().trim()
    if (version.startsWith('v'))
        version = version.substring(1)

    return version
}
